{"version":3,"sources":["assets/cloud.png","assets/smallboy.jpg","assets/messages.js","components/ContinueMessage/ContinueMessage.js","components/WhiteCircle/WhiteCircle.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","messages","ContinueMessage","message","className","WhiteCircle","App","props","handleKeyDown","state","waitingForKey","currentMessageIndex","setState","nextIndex","document","querySelector","classList","add","setTimeout","remove","window","addEventListener","this","id","src","cloud","alt","boy","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gNCe5BC,G,MAfE,CAAC,+BAAD,4KCWFC,G,MARS,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACxB,OACE,yBAAKC,UAAU,mBACb,2BAAID,MCKKE,G,MARK,WAClB,OACE,yBAAKD,UAAU,kB,gCC0EJE,E,YAtEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRC,cAAgB,WAAO,IAAD,EACuB,EAAKC,MAA3CC,EADe,EACfA,cAAeC,EADA,EACAA,oBACpB,GAAID,EAAe,CACjB,EAAKE,SAAL,eAAkB,EAAKH,MAAvB,CAA8BC,eAAe,KAC7C,IAAIG,EAAYF,EAAsB,EACpB,IAAdE,GACFC,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,2BACrDH,SAASC,cAAc,oBAAoBC,UAAUC,IAAI,0BACzDH,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,YACrDH,SAASC,cAAc,UAAUC,UAAUC,IAAI,6BAC/CC,YAAW,WACTJ,SAASC,cAAc,oBAAoBC,UAAUC,IAAI,0BACzDH,SAASC,cAAc,oBAAoBC,UAAUC,IAAI,yBACzDH,SAASC,cAAc,UAAUC,UAAUC,IAAI,qBAC/C,EAAKL,SAAL,eAAkB,EAAKH,MAAvB,CAA8BE,oBAAqBA,EAAsB,EAAGD,eAAe,OAC3F,OAEmB,IAAdG,GAAiC,IAAdA,GAAiC,IAAdA,EAM7C,EAAKD,SAAL,eAAkB,EAAKH,MAAvB,CAA8BE,oBAAqBA,EAAsB,EAAGD,eAAe,KAEtE,IAAdG,GACPC,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,aACrDH,SAASC,cAAc,gBAAgBC,UAAUG,OAAO,YACxDL,SAASC,cAAc,QAAQC,UAAUC,IAAI,kCAC7C,EAAKL,SAAL,eAAkB,EAAKH,MAAvB,CAA8BE,oBAAqBA,EAAsB,EAAGD,eAAe,MAEpFG,GAAa,GAAKA,EAAY,IACrC,EAAKD,SAAL,eAAkB,EAAKH,MAAvB,CAA8BE,oBAAqBA,EAAsB,EAAGD,eAAe,OAhD/F,EAAKD,MAAQ,CACXE,oBAAqB,EACrBD,eAAe,GAJA,E,iFAQE,IAAD,OAClBI,SAASC,cAAc,gBAAgBC,UAAUC,IAAI,oBACrDH,SAASC,cAAc,oBAAoBC,UAAUC,IAAI,mBACzDC,YAAW,WACTE,OAAOC,iBAAiB,UAAW,EAAKb,eACxCY,OAAOC,iBAAiB,aAAc,EAAKb,eAC3C,EAAKI,SAAL,eAAkB,EAAKH,MAAvB,CAA8BC,eAAe,OAC5C,Q,+BAwCK,IACLC,EAAuBW,KAAKb,MAA5BE,oBAEL,OACE,yBAAKY,GAAG,OACN,wBAAInB,UAAU,eAAd,eACA,kBAAC,EAAD,CAAiBD,QAASF,EAASU,KACnC,kBAAC,EAAD,MACA,yBAAKa,IAAKC,IAAOrB,UAAU,QAAQsB,IAAI,sBACvC,yBAAKF,IAAKG,IAAKvB,UAAU,MAAMsB,IAAI,mB,GAjEvBE,IAAMC,WCIJC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzC,c","file":"static/js/main.6c7488bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.c66e1bc5.png\";","module.exports = __webpack_public_path__ + \"static/media/smallboy.19a950d8.jpg\";","const messages = [\r\n  `Press any key to continue...`,\r\n  `Huh?`,\r\n  `Where am I?`,\r\n  `It feels like I've been sleeping...`,\r\n  `A really long time....`,\r\n  ``,\r\n  `Huh?`,\r\n  `Who is that?`,\r\n  `He looks so familiar...`,\r\n  `But I can't quite...`,\r\n  `---`,\r\n  `!!!`,\r\n]\r\n\r\nexport default messages;","import React from 'react';\r\nimport './ContinueMessage.css';\r\n\r\nconst ContinueMessage = ({message}) => {\r\n  return (\r\n    <div className=\"ContinueMessage\">\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContinueMessage;","import React from 'react';\r\nimport './WhiteCircle.css';\r\n\r\nconst WhiteCircle = () => {\r\n  return (\r\n    <div className=\"WhiteCircle\">\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhiteCircle;","import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport messages from '../assets/messages';\r\nimport ContinueMessage from './ContinueMessage/ContinueMessage';\r\nimport WhiteCircle from './WhiteCircle/WhiteCircle';\r\nimport cloud from '../assets/cloud.png';\r\nimport boy from '../assets/smallboy.jpg';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentMessageIndex: 0,\r\n      waitingForKey: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.querySelector('.intro-title').classList.add('animation-expand')\r\n    document.querySelector('.ContinueMessage').classList.add('animation-delay')\r\n    setTimeout(() => {\r\n      window.addEventListener('keydown', this.handleKeyDown);\r\n      window.addEventListener('touchstart', this.handleKeyDown);\r\n      this.setState({...this.state, waitingForKey: true})\r\n    }, 3200);\r\n  }\r\n\r\n  handleKeyDown = () => {\r\n    let {waitingForKey, currentMessageIndex} = this.state;\r\n    if (waitingForKey) {\r\n      this.setState({...this.state, waitingForKey: false});\r\n      let nextIndex = currentMessageIndex + 1;\r\n      if (nextIndex === 1) {\r\n        document.querySelector('.intro-title').classList.add('animation-reverseExpand');\r\n        document.querySelector('.ContinueMessage').classList.add('animation-reverseDelay');\r\n        document.querySelector('.WhiteCircle').classList.add('smallOne');\r\n        document.querySelector('.cloud').classList.add('animation-cloudToPosition');\r\n        setTimeout(() => {\r\n          document.querySelector('.ContinueMessage').classList.add('animation-normalFadeIn');\r\n          document.querySelector('.ContinueMessage').classList.add('talking-cloud-message');\r\n          document.querySelector('.cloud').classList.add('animation-slowBob');\r\n          this.setState({...this.state, currentMessageIndex: currentMessageIndex + 1, waitingForKey: true});\r\n        },13000);\r\n      }\r\n      else if (nextIndex === 2 || nextIndex === 3 || nextIndex === 4) {\r\n        // document.querySelector('.ContinueMessage').classList.add('animation-quickFadeOutThenIn');\r\n        // setTimeout(() => {\r\n        //   document.querySelector('.ContinueMessage').classList.remove('animation-quickFadeOutThenIn')\r\n        //   this.setState({...this.state, waitingForKey: true})\r\n        // }, 1000)\r\n        this.setState({...this.state, currentMessageIndex: currentMessageIndex + 1, waitingForKey: true});\r\n      }\r\n      else if (nextIndex === 5) {\r\n        document.querySelector('.WhiteCircle').classList.add('mediumOne');\r\n        document.querySelector('.WhiteCircle').classList.remove('smallOne');\r\n        document.querySelector('.boy').classList.add('animation-zeroToHundredOpacity');\r\n        this.setState({...this.state, currentMessageIndex: currentMessageIndex + 1, waitingForKey: true});\r\n      }\r\n      else if (nextIndex >= 6 && nextIndex < 12) {\r\n        this.setState({...this.state, currentMessageIndex: currentMessageIndex + 1, waitingForKey: true});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n  let {currentMessageIndex} = this.state;\r\n\r\n  return (\r\n    <div id=\"App\">\r\n      <h1 className=\"intro-title\">Generations</h1>\r\n      <ContinueMessage message={messages[currentMessageIndex]} />\r\n      <WhiteCircle />\r\n      <img src={cloud} className=\"cloud\" alt=\"generation spirit\" />\r\n      <img src={boy} className=\"boy\" alt=\"small boy\" />\r\n    </div>\r\n  );\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}